HTML spans:
  HTML spans:
    input: I can put in a %(myclass)span with a class% like this.
    desc: <p>You can enclose a bit of text in an <span class="caps">HTML</span>
      span tag by enclosing it in percent signs.  Then you can apply attributes
      to the span (see <a href="/textile/attributes">attributes</a>).</p>
Inline code:
  Inline code:
    input: On the command line, you can just type @bash@.
    desc: <p>To mark code in your text, surround the code with at signs.</p>
Block code:
  Block code:
    input: ! 'bc. # Output "I love Ruby"

      say = "I love Ruby"

      puts say'
    desc: <p>You can insert a block of code with the <code>bc.</code> block signature.</p>
  Extended block code:
    input: ! 'bc.. # Output "I love Ruby"

      say = "I love Ruby"

      puts say


      # Output "I *LOVE* RUBY"

      say[''love''] = "*love*"

      puts say.upcase


      p. And that is how you do it.'
    desc: <p>Use <code>bc..</code> and the block of code will continue to include
      blank lines until it encounters another block signature such as <code>p.</code></p>
Inline HTML:
  Inline HTML:
    input: I can use HTML directly in my <span class="youbetcha">Textile</span>.
    desc: <p>You can use <span class="caps">HTML</span> right in your paragraph
      text, presuming the site administrator has not set :filter_html or :sanitize_html
      restrictions.</p>
Block HTML:
  Block HTML:
    input: ! '<div id="shopping-cart">

      <form action="form_action" method="get">

      h3. Your cart


      * Item one

      * Item two


      <p><input type="submit" value="Check Out" /></p>


      </form>

      </div>'
    desc: <p>You can use <span class="caps">HTML</span> freely within your Textile
      4 Textile.  <span class="caps">HTML</span> tags on a line by themselves will
      not be mangled.  Don&#8217;t forget to leave a blank line after any Textile,
      just like usual.</p>
No Textile:
  No Textile:
    input: ! '<notextile>

      Don''t touch this!

      </notextile>


      Use ==*asterisks*== to say something *strongly*.'
    desc: <p>You can have Textile skip a chunk of text with the <code>&lt;notextile&gt;</code>
      tag or double-equals.</p>
  Notextile block:
    input: ! 'notextile. This has *no* textile formatting, see?


      notextile.. And this notextile block


      Just keeps going and going.


      p. Until you end it with another block.'
    desc: <p>Notextile can also be used as a normal or extended Textile block.</p>
Preformatted text:
  Preformatted text:
    input: ! "pre.      Text in a pre block\nis displayed in a fixed-width\n     font.
      It preserves\n  s p a c e s, line breaks\n     and ascii bunnies.\n           _
      \    _   \n           ` /`/   \n             V /    \n            /. .    \n
      \          = T /=   \n            / ^     \n         {}/\\ //   \n         __
      \" \" /__ \n        (____/^____)"
    desc: <p>Preformatted text can be put in a <code>pre.</code> block and its whitespace
      will be preserved.  <code>pre.</code> is almost identical to <code>bc.</code>,
      except that <code>&lt;code&gt;...&lt;/code&gt;</code> tags are not used within
      the <code>&lt;pre&gt;</code> block.</p>
  Extended preformatted:
    input: ! 'pre.. All monospaced


      Even the blank lines


      p. But now a paragraph'
    desc: <p>Use <code>pre..</code> to make a block of extended preformatted text
      that continues until it encounters another block signature, like <code>p.</code></p>
